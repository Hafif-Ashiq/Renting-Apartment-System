{
  "language": "Solidity",
  "sources": {
    "contracts/RentalContract.sol": {
      "content": "/*\r\n    Terms::\r\n        - Rent for a specific time\r\n        - struct appartment [id, Address , rent, details]   -- Done\r\n        - Create an appartment   -- Done\r\n        - Multiple Appartments [List of appartments] -- Done\r\n        - User can rent out appartment -- Done\r\n        - Terms of rental Agreement [i.e starting date, ending date] --Done  -- On basis of appartment --> Can not be changed once contract is finalised\r\n        \r\n        - rental agreement renewal after month or so  --Done\r\n        - Get balance of Contract  --Done\r\n        - Get balance of single rented appartment  --Done\r\n        - Get remaining time of rented apartment  --Done\r\n        - Withdraw rent to the landlords   -- Done\r\n        - Withdrawl of security/advance by renter  -- Done\r\n        - delete any apartment from list --Done\r\n\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.17;\r\n\r\ncontract RentalContract {\r\n    address immutable owner;\r\n\r\n    // Struct for appartment\r\n    struct Apartment {\r\n        address landlord; // On Creation\r\n        address renter; // On Rent\r\n        bool isRented; // On rent == true\r\n        uint rentAmount; // on creation\r\n        uint rentalPeriod; // on rent\r\n        uint advancePayment; // on creation\r\n        uint balance; // on rent    -- Determines the balance in the contract from this apartment\r\n        uint startRentTime; // On rent\r\n        uint startMonthTime; // Changes every month when payment is made\r\n    }\r\n\r\n    mapping(uint => Apartment) public apartments;\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"You're not the owner\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyLandlord(uint _id) {\r\n        require(apartments[_id].landlord == msg.sender, \"You are not landlord of this apartment\");\r\n        _;\r\n    }\r\n\r\n    modifier appartmentExists(uint _id) {\r\n        require(apartments[_id].landlord != address(0), \"Apartment doesn't exist\");\r\n        _;\r\n    }\r\n\r\n    constructor() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    // Adding department to the contract\r\n    function addApartment(\r\n        uint _apartmentID,\r\n        address _landlord,\r\n        uint _rentAmount,\r\n        uint _advancePayment\r\n    ) public onlyOwner {\r\n        // In order to check if appartment already exists or not, the landlord address of it should be none as the appartment object will not exist\r\n        require(apartments[_apartmentID].landlord == address(0), \"The Apartment already exists\");\r\n        // Adding appartment to the appartment mapping based on uint id\r\n        apartments[_apartmentID] = Apartment(\r\n            _landlord,\r\n            address(0),\r\n            false, // Not Rented\r\n            _rentAmount,\r\n            0, // Rental Period not specified\r\n            _advancePayment,\r\n            0, // 0 Balance at start\r\n            0, // Not start rent\r\n            0 // Not started rent\r\n        );\r\n    }\r\n\r\n    // Remove any Apartment\r\n    function deleteApartment(uint _apartmentId) public onlyOwner appartmentExists(_apartmentId) {\r\n        delete apartments[_apartmentId];\r\n    }\r\n\r\n    // Rent apartmet\r\n    function rentApartment(\r\n        uint _apartmentId,\r\n        address _renter,\r\n        uint _rentalPeriod\r\n    ) public payable appartmentExists(_apartmentId) {\r\n        Apartment memory selectedApartment = apartments[_apartmentId];\r\n        // Check conditions for renting apartment\r\n\r\n        // If the apartment is already rented or not\r\n        require(selectedApartment.isRented == false, \"The apartment is already rented\");\r\n        // If the price sent is ok or not i.e should equal the sum of advance as well as first payment\r\n        require(\r\n            msg.value == selectedApartment.advancePayment + selectedApartment.rentAmount,\r\n            \"The amount sent is low\"\r\n        );\r\n        // Change the apartment status\r\n        selectedApartment.renter = _renter;\r\n        selectedApartment.rentalPeriod = _rentalPeriod;\r\n        selectedApartment.isRented = true;\r\n        selectedApartment.balance = selectedApartment.advancePayment + selectedApartment.rentAmount;\r\n        selectedApartment.startRentTime = block.timestamp;\r\n        selectedApartment.startMonthTime = block.timestamp;\r\n        // Set storage appartment details according to updated one's\r\n        apartments[_apartmentId] = selectedApartment;\r\n    }\r\n\r\n    // Make rental Payment\r\n    function makeRentPayment(uint _apartmentId) public payable appartmentExists(_apartmentId) {\r\n        // Getting the apartment against apartment id\r\n        Apartment memory selectedApartment = apartments[_apartmentId];\r\n        // Checking the conditions for payment of rent\r\n        require(msg.sender == selectedApartment.renter, \"You do not rent this apartment\");\r\n        require(\r\n            block.timestamp - selectedApartment.startMonthTime >= 2592000,\r\n            \"Your 30 days have not been completed yet\"\r\n        );\r\n        require(msg.value == selectedApartment.rentAmount, \"The amount you sent is not correct\");\r\n        // Adding 30 days to the initial month start to start the next month\r\n        apartments[_apartmentId].startMonthTime = selectedApartment.startMonthTime + 2592000;\r\n        apartments[_apartmentId].balance = apartments[_apartmentId].balance + msg.value;\r\n    }\r\n\r\n    // Withdraw funds to landlord for the rent only as security stays in the contract\r\n\r\n    function withdrawFunds(\r\n        uint _apartmentId\r\n    ) public payable onlyLandlord(_apartmentId) appartmentExists(_apartmentId) {\r\n        payable(msg.sender).transfer(\r\n            apartments[_apartmentId].balance - apartments[_apartmentId].advancePayment\r\n        );\r\n        apartments[_apartmentId].balance = apartments[_apartmentId].advancePayment;\r\n    }\r\n\r\n    // Withdraw security\r\n    function endRentalContract(uint _apartmentId) public payable appartmentExists(_apartmentId) {\r\n        Apartment memory selectedApartment = apartments[_apartmentId];\r\n        require(msg.sender == selectedApartment.renter, \"You're not renter of the apartment\");\r\n        require(\r\n            block.timestamp - selectedApartment.startRentTime > selectedApartment.rentalPeriod,\r\n            \"Your rental period is not over\"\r\n        );\r\n        payable(msg.sender).transfer(selectedApartment.advancePayment);\r\n        // Resets the appartment as if it is not rented after withdrawing the advance payment\r\n\r\n        selectedApartment.renter = address(0);\r\n        selectedApartment.rentalPeriod = 0;\r\n        selectedApartment.isRented = false;\r\n        selectedApartment.balance = 0;\r\n        selectedApartment.startRentTime = 0;\r\n        selectedApartment.startMonthTime = 0;\r\n\r\n        apartments[_apartmentId] = selectedApartment;\r\n    }\r\n\r\n    function getBalance() public view returns (uint) {\r\n        return address(this).balance;\r\n    }\r\n\r\n    function getApartmentBalance(\r\n        uint _apartmentId\r\n    ) public view appartmentExists(_apartmentId) returns (uint) {\r\n        return apartments[_apartmentId].balance;\r\n    }\r\n\r\n    function getRemainingTime(\r\n        uint _apartmentId\r\n    ) public view appartmentExists(_apartmentId) returns (int) {\r\n        return\r\n            int(apartments[_apartmentId].rentalPeriod) -\r\n            int(apartments[_apartmentId].startRentTime);\r\n    }\r\n\r\n    function getOwner() public view returns (address) {\r\n        return owner;\r\n    }\r\n\r\n    function getApartment(uint _id) public view returns (Apartment memory) {\r\n        return apartments[_id];\r\n    }\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}